!!! Strict
<html>
%head
  %link(rel="stylesheet" type="text/css" href="planning.css")
<body>
%h1 Voluntary Tracker Requirements
%hr
:textile
  h2. Roles

  There are two main roles: 

  * Trackee (the person who is being tracked) 
  * Viewer/Supervisor

  h2. Basic Use cases

  The following use cases cover the version 1.0 functionality. Just enough to get things off the ground. The format is slightly modified from the standard in that I have the title (a.k.a. Use Case Name) as an h3 above the use case and have named "Application" as "System". I include it only in case these get printed out or separated some day and someone needs to decide what they are from.

  Some glaring omissions from basic use cases: remove snapshots, remove supervisors, edit activity flagging list

  Some less-glaring omissions: add categories and sub-categories

  h3. Tracks Time

%table.usecase
  %tr
    %th(scope="row") Case #
    %td 1

  %tr
    %th(scope="row") System
    %td Voluntary Tracker

  %tr
    %th(scope="row") Case Description
    %td The Trackee works and carries out his life, using the tracker app to record what he does on the computer and when he is on the clock and when not.

  %tr
    %th(scope="row") Primary Actor
    %td Trackee

  %tr
    %th(scope="row") Preconditions
    %td

  %tr 
    %th(scope="row") Trigger
    %td

  %tr
    %th(scope="row") Basic Flow
    %td
      :textile
        # Trackee starts up computer
        # Trackee opens tracking program (may start automatically).
        # The program appears on the screen but is not tracking. The tracking mode is "off-the-clock"
        # Trackee toggles start tracking to start the tracking.
        # The program sends its first snapshot to the server, marked off-the-clock and as having no connected predecessor. It then chooses the time of its next snapshot. Note that the snapshots all include the title of the active window.
        # Trackee toggles "on-the-clock". (To "on-the-clock: yes")
        # The program sends another snapshot to the server, marked as "on-the-clock" and that tracking has been on since its predecessor snapshot.
        # Trackee works.
        # The time of the next snapshot comes.
        # The program sends another snapshot, marked on-the-clock and that tracking has been on since its predecessor snapshot. The program decides the time of the next snapshot.
        # Trackee toggles "on-the-clock" (to on-the-clock: No)
        # The program sends another snapshot to the server, marked as "off-the-clock" and that tracking has been on since its predecessor snapshot.
        # Trackee plays video games.
        # The time of the next snapshot comes.
        # The program sends another snapshot, marked on-the-clock and that tracking has been on since its predecessor snapshot. The program decides the time of the next snapshot.
        # Trackee toggles "on-the-clock". (To "on-the-clock: Yes")
        # The program sends another snapshot to the server, marked as "on-the-clock" and that tracking has been on since its predecessor snapshot.
        # Trackee works.
        # Trackee toggles "Is Tracking". (To "Is tracking: No")
        # The program sends another snapshot to the server, marked as "on-the-clock" and that tracking has been on since its predecessor snapshot. 
        # Trackee does something he'd rather not remember.
        # The time of the next snapshot comes.
        # The program does nothing
        # Trackee toggles "Is Tracking". (To "Is tracking: Yes")
        # The program sends a snapshot to the server, marked on-the-clock and as having no connected predecessor. It then chooses the time of its next snapshot. Note that the new time setting would not occur if there were still a pending snapshot time.
        # Trackee works.
        # Trackee closes the program.
        # The program sends another snapshot to the server, marked as "on-the-clock" and that tracking has been on since its predecessor snapshot. Then the program closes.

  %tr
    %th(scope="row") Alternate Flows
    %td
      :textile
        *First use*

        Between opening the tracking program and it appearing on-screen, the program pops up a dialog asking for the google account of the user being tracked and the automatically generated code giving write access to the account. (This code is available on the web client.) The Trackee goes to the web app, logs in, clicks on "display write access code", copies and pastes the code into the dialog box, and clicks OK.

        *Power failure*

        If the program closes unexpectedly and can't send its snapshot to the server, then the time between snapshots is not tracked - just as if tracking had been turned off at the last snapshot. If the program closes unexpectedly while sending a snapshot, the snapshot is discarded as if it had never been sent. In this way, the program gives a slightly pessimistic estimate of the time spent and what it was spent doing.

        *Toggle on-the-clock before starting tracking*

        Instead of 4-7, the trackee toggles "on-the-clock" first. The system sends nothing. Then the trackee toggles "start" tracking and the system sends its first snapshot, this one marked "on-the-clock".

%h3 Adds Supervisors

%table.usecase
  %tr
    %th(scope="row") Case #
    %td 2

  %tr
    %th(scope="row") System
    %td Voluntary Tracker

  %tr
    %th(scope="row") Case Description
    %td A trackee allows supervisors to view his on-the-clock activity.

  %tr
    %th(scope="row") Primary Actor
    %td Trackee

  %tr
    %th(scope="row") Preconditions
    %td Trackee is logged in

  %tr
    %th(scope="row") Trigger
    %td Trackee informs system that he wants to add a viewer

  %tr
    %th(scope="row") Basic Flow
    %td
      :textile
        # System requests (Google) email address and which category the viewer is granted access to
        # Trackee supplies information
        # Supervisor now has access to Trackee's records for that given category.

        Note: it is assumed that the Trackee will not have many supervisors and not many categories, so adding one at a time is ok. A future enhancement might be to allow making certain categories public.

  %tr
    %th(scope="row") Alternate Flows
    %td
      :textile
        h4. The Trackee supplies an invalid address or category

        If an invalid address or category are supplied, the user is informed of this and the information is requested again.
        
        h4. The Trackee cancels adding

        Instead of supplying information, the Trackee can cancel when adding a supervisor. If he cancels, no changes are made to his account.
        
        h4. The Trackee has never logged in before
        
        After login, the system creates a new user object linked to the trackee's Google account and a random write-access password. The new object will have two categories to which supervisors can be added: on the clock and off the clock. Both will have the Trackee as a member.

        I'll make a 17 character password, but use python's built-in prng to generate it. Eventually, I might go to the more cryptograpically secure option of random.org - however, random.org is only accessible through http not https - so the extra work might not be worth it.

        Thoughts on random.org:
        * 17 chars base-64 is 102 bits - get it as a list of integers and then convert them to characters passwords.
        * Use base-64 so we don't waste bits (95 possible chars requires random.org to generate 7 bits for each, even though not all of the information is used).
        * At this rate 200K bits per day at 102 bits per password is 1960 new accounts per day average usage. I don't know if this app would ever get that kind of traffic.
        * The rate-limiting will require a classical bounded buffer. The client code can be a reader for the buffer of fetched passwords. Maybe Google's worker threads will be able to do the writing into the buffer.

      
%h3 Views Time-Spent Log

%table.usecase
  %tr
    %th(scope="row") Case #
    %td 3

  %tr
    %th(scope="row") System
    %td Voluntary Tracker

  %tr
    %th(scope="row") Case Description
    %td Supervisor looks at the raw amounts of time spent over a given time-interval for a given trackee

  %tr
    %th(scope="row") Primary Actor
    %td Supervisor

  %tr
    %th(scope="row") Preconditions
    %td Supervisor is logged in

  %tr
    %th(scope="row") Trigger
    %td Supervisor tells system that he wants to view time logs (this may be default on log-in, since I suspect it will be the main reason users use the web system)

  %tr
    %th(scope="row") Basic Flow
    %td
      %ol
        %li Supervisor selects trackee (which may be himself)
        %li
          %p
            Supervisor selects
            %ul
              %li category (from the ones the Trackee has made accessible to him). If there is only one category there is no need to make this selection.
              %li time period (day, week, month, year, all time)
              %li granularity (hour, day, week, month, year)
              %li starting time (some time before now).

          %p.wrongphase Note: A good interface for starting time might be to populate a dropdown box with time-period units before this one (rounding to the nearest time-period) down to the earliest for which there is data.

          %p.wrongphase Another potential interface would just be to allow the user to type in an integer number. So the line above the chart would read:
          %ul 
            %li.wrongphase Time spent in [category] for each [granularity] over one [time period] starting [number] &lt;time periods&gt; ago.

          %p.wrongphase &lt;time periods&gt; would be normal text that would change depending on the selection in the [time period] dropdown.

          %p.wrongphase This would default to category: on-the-clock, time-period: week, granularity: day, starting-time: 0 weeks ago (so, this week). If someone entered a fraction, it would be rounded and negative numbers would just search for data that hasn't happened yet. Non-numbers would also be treated as 0.

          %p.wrongphase Maybe it would be good just to have a start time and end time.
          %p.wrongphase Or, to keep it simple, one could have:
          %ul
            %li.wrongphase Time spent in [category] for each [granularity] starting at [day] [hour] and ending at [day] [hour]
        
        %li
          %p System prepares a chart - bar chart, where each bar sums all time intervals in the half-open interval [start_time+n*granularity, start_time+(n+1)*granularity) where n is a non-negative integer and n*granularity <= time_period. The bars are labeled with the appropriate date/time.
          %p Intervals where no data has been recorded will show up as having 0 time spent.
        %li Supervisor can then select next and previous on the chart to change the starting time by time_period
        %li Supervisor can also change time period and granularity
        %li Supervisor can also change Trackee or select another main activity

      %p Note: an interesting feature (that doesn't belong in the basic use cases) is to allow looking at the total for a subset of the repetition interval. For example, look at total hours worked on Mondays for the whole year next to the total for Tuesdays. Or the total for each hour on Mondays over the whole year or for each hour of the day in general over the whole year. (And instead of year, one could look at all data.)
  %tr
    %th(scope="row") Alternate Flows
    %td
      %h4 Supervisor does not have access to any Trackees

      An error message is printed. 
      
%h3 View and flag foreground windows

%table.usecase
  %tr
    %th(scope="row") Case #
    %td 4

  %tr
    %th(scope="row") System
    %td Voluntary Tracker

  %tr
    %th(scope="row") Case Description
      
    %td Each snapshot will have a record of the window title text of the foreground window. A Supervisor should be able to list the window titles and change whether given window titles are appropriate to a category, inappropriate, or unknown. The default view should minimize the effort of the supervisor in finding appropriate titles.

  %tr
    %th(scope="row") Primary Actor
    %td Supervisor

  %tr
    %th(scope="row") Preconditions
    %td Supervisor is logged in

  %tr
    %th(scope="row") Trigger
    %td Supervisor tells system he wants to view/flag window titles

  %tr
    %th(scope="row") Basic Flow
    %td
      %ol
        %li
          Supervisor selects:
          %ul
            %li Trackee (default last tracked - or self if none last tracked)
            %li category (default on-the-clock - or first if on-the-clock is not available) - in the future one might select the union of several categories
            %li start time (default yesterday midnight)
            %li end time (default now)
            %li set of items to display (all, appropriate & unknown (default), only appropriate, only unknown)
            %li what kind of appropriateness marking to display (fraction of votes for all supervisors (default for viewing own data), own markings (default for viewing others' data)) - this is a feature to be added later (see below)
          %li System displays list of window titles marked with date/time, appropriateness, and with some way of altering their appropriateness
          %li Supervisor sees one unknown item that is appropriate. He marks it appropriate
          %li
            %p The system remembers that window title as appropriate and marks it as such in the future for that supervisor/trackee/category triple.
            %p It is important to use the supervisor/trackee/category triple. It may be appropriate for a purchasing agent to be surfing amazon on-the-clock. It may not be appropriate for a programmer. One supervisor may deem something appropriate, while another may deem it inappropriate. It is perfectly appropriate to read web-comics off-the-clock, but not on-the-clock (for everyone but web-comic authors).
          %li Supervisor sees an appropriate item that is inappropriate and changes it.
          %li The system remembers the supervisor's choice.
          %li Supervisor sees an inappropriate item that is actually unknown and changes it (it is unknown because it is ambiguous)
          %li The system remembers the supervisor's choice.

      %p It would be good to have a list of sensible defaults for any Trackee. Improving the system's unaided performance is a major opportunity for research - identifying whether activity (inferred from sequence of window titles) is appropriate to the given category.

      %p As an initial approximation, the system could make an estimate based on the window title and all supervisors that have seen that window title and marked it for that category. Because of the danger of marking something appropriate when it is actually inappropriate, such a marking would have to have high reliability before being used.

      %p A desirable future feature is for users to be able to recategorize and delete snapshots in their own track. So, if I am reviewing my day and I see a window title inappropriate for on-the-clock (for example, I forgot to switch the tracker before I started reading web-comics), I can change its category and this changes the category of the snapshot of which the window-title is a part. Alternately, I can also delete the snapshot (though this would be more technically involved because one would have to deal with modifying other snapshots that refer to this one and claim activity was constantly monitored since it).

      %p Another good feature would be to have users see their supervisors' votes on appropriateness for each item (allowing them to change category, that is, mark things on/off the clock, in response to feedback.)

      %p In the same vein, it might be nice to have a way for a supervisor to send a message asking the trackee about inappropriate window titles - so the trackee could justify them or place them in the right category.

      %p I am using category rather than "on-the-clock" because it might be useful for some users in the future to mark things as: "off-the-clock", "20% time", "project management", "in meeting", "coding" and different activities might be appropriate for each.

      %p Full screen apps on mobile platforms might be lacking window titles - need to look into this when I create clients for them.

      %p A neat report that doesn't belong in the basic feature list would be to mine common substrings in the window titles and list them by time spent.
  %tr
    %th(scope="row") Alternate Flows
    %td
      %h4 Supervisor does not have access to any Trackees

      %p An error message is printed. 
            
%h3 Blank Use Case Template

%table.usecase
  %tr
    %th(scope="row") Case #
    %td

  %tr
    %th(scope="row") System
    %td Voluntary Tracker

  %tr
    %th(scope="row") Case Description
    %td

  %tr
    %th(scope="row") Primary Actor
    %td

  %tr
    %th(scope="row") Preconditions
    %td

  %tr
    %th(scope="row") Trigger
    %td

  %tr
    %th(scope="row") Basic Flow
    %td

  %tr
    %th(scope="row") Alternate Flows
    %td
      
</body></html>
