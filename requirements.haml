!!! Strict
<html><body>
%h1 Voluntary Tracker Requirements
%hr
:textile
  h2. Roles

  There are two main roles: 

  * Trackee (the person who is being tracked) 
  * Viewer/Supervisor

  h2. Basic Use cases

  The following use cases cover the version 1.0 functionality. Just enough to get things off the ground. The format is slightly modified from the standard in that I have the title (a.k.a. Use Case Name) as an h3 above the use case and have named "Application" as "System". I include it only in case these get printed out or separated some day and someone needs to decide what they are from.

  Some glaring omissions from basic use cases: remove snapshots, remove supervisors, edit activity flagging list

  Some less-glaring omissions: add categories and sub-categories

  h3. Tracks Time

%table.usecase
  %tr
    %th(scope="row") Case #
    %td 1

  %tr
    %th(scope="row") System
    %td Voluntary Tracker

  %tr
    %th(scope="row") Case Description
    %td The Trackee works and carries out his life, using the tracker app to record what he does on the computer and when he is on the clock and when not.

  %tr
    %th(scope="row") Primary Actor
    %td Trackee

  %tr
    %th(scope="row") Preconditions
    %td

  %tr 
    %th(scope="row") Trigger
    %td

  %tr
    %th(scope="row") Basic Flow
    %td
      :textile
        # Trackee starts up computer
        # Trackee opens tracking program (may start automatically).
        # The program appears on the screen but is not tracking. The tracking mode is "off-the-clock"
        # Trackee toggles start tracking to start the tracking.
        # The program sends its first snapshot to the server, marked off-the-clock and as having no connected predecessor. It then chooses the time of its next snapshot. Note that the snapshots all include the title of the active window.
        # Trackee toggles "on-the-clock". (To "on-the-clock: yes")
        # The program sends another snapshot to the server, marked as "on-the-clock" and that tracking has been on since its predecessor snapshot.
        # Trackee works.
        # The time of the next snapshot comes.
        # The program sends another snapshot, marked on-the-clock and that tracking has been on since its predecessor snapshot. The program decides the time of the next snapshot.
        # Trackee toggles "on-the-clock" (to on-the-clock: No)
        # The program sends another snapshot to the server, marked as "off-the-clock" and that tracking has been on since its predecessor snapshot.
        # Trackee plays video games.
        # The time of the next snapshot comes.
        # The program sends another snapshot, marked on-the-clock and that tracking has been on since its predecessor snapshot. The program decides the time of the next snapshot.
        # Trackee toggles "on-the-clock". (To "on-the-clock: Yes")
        # The program sends another snapshot to the server, marked as "on-the-clock" and that tracking has been on since its predecessor snapshot.
        # Trackee works.
        # Trackee toggles "Is Tracking". (To "Is tracking: No")
        # The program sends another snapshot to the server, marked as "on-the-clock" and that tracking has been on since its predecessor snapshot. 
        # Trackee does something he'd rather not remember.
        # The time of the next snapshot comes.
        # The program does nothing
        # Trackee toggles "Is Tracking". (To "Is tracking: Yes")
        # The program sends a snapshot to the server, marked on-the-clock and as having no connected predecessor. It then chooses the time of its next snapshot. Note that the new time setting would not occur if there were still a pending snapshot time.
        # Trackee works.
        # Trackee closes the program.
        # The program sends another snapshot to the server, marked as "on-the-clock" and that tracking has been on since its predecessor snapshot. Then the program closes.

  %tr
    %th(scope="row") Alternate Flows
    %td
      :textile
        *First use*

        Between opening the tracking program and it appearing on-screen, the program pops up a dialog asking for the google account of the user being tracked and the automatically generated code giving write access to the account. (This code is available on the web client.) The Trackee goes to the web app, logs in, clicks on "display write access code", copies and pastes the code into the dialog box, and clicks OK.

        *Power failure*

        If the program closes unexpectedly and can't send its snapshot to the server, then the time between snapshots is not tracked - just as if tracking had been turned off at the last snapshot. If the program closes unexpectedly while sending a snapshot, the snapshot is discarded as if it had never been sent. In this way, the program gives a slightly pessimistic estimate of the time spent and what it was spent doing.

        *Toggle on-the-clock before starting tracking*

        Instead of 4-7, the trackee toggles "on-the-clock" first. The system sends nothing. Then the trackee toggles "start" tracking and the system sends its first snapshot, this one marked "on-the-clock".

%h3 Adds Supervisors

%table.usecase
  %tr
    %th(scope="row") Case #
    %td 2

  %tr
    %th(scope="row") System
    %td Voluntary Tracker

  %tr
    %th(scope="row") Case Description
    %td A trackee allows supervisors to view his on-the-clock activity.

  %tr
    %th(scope="row") Primary Actor
    %td Trackee

  %tr
    %th(scope="row") Preconditions
    %td

  %tr
    %th(scope="row") Trigger
    %td

  %tr
    %th(scope="row") Basic Flow
    %td
      :textile
        # Trackee logs into the system
        # Trackee informs system that he wants to add a viewer
        # System requests (Google) email address and which category the viewer is granted access to
        # Trackee supplies information
        # Supervisor now has access to Trackee's records for that given category.

        Note: it is assumed that the Trackee will not have many supervisors and not many categories, so adding one at a time is ok. A future enhancement might be to allow making certain categories public.

  %tr
    %th(scope="row") Alternate Flows
    %td
      :textile
        h4. The Trackee supplies an invalid address or category

        If an invalid address or category are supplied, the user is informed of this and the information is requested again.
        
        h4. The Trackee cancels adding

        Instead of supplying information, the Trackee can cancel when adding a supervisor. If he cancels, no changes are made to his account.
        
        h4. The Trackee has never logged in before
        
        After login, the system creates a new user object linked to the trackee's Google account and a random write-access password. The new object will have two categories to which supervisors can be added: on the clock and off the clock. Both will have the Trackee as a member.

        I'll make a 17 character password, but use python's built-in prng to generate it. Eventually, I might go to the more cryptograpically secure option of random.org - however, random.org is only accessible through http not https - so the extra work might not be worth it.

        Thoughts on random.org:
        * 17 chars base-64 is 102 bits - get it as a list of integers and then convert them to characters passwords.
        * Use base-64 so we don't waste bits (95 possible chars requires random.org to generate 7 bits for each, even though not all of the information is used).
        * At this rate 200K bits per day at 102 bits per password is 1960 new accounts per day average usage. I don't know if this app would ever get that kind of traffic.
        * The rate-limiting will require a classical bounded buffer. The client code can be a reader for the buffer of fetched passwords. Maybe Google's worker threads will be able to do the writing into the buffer.

      
%h3 Views Time-Spent Log

%table.usecase
  %tr
    %th(scope="row") Case #
    %td 3

  %tr
    %th(scope="row") System
    %td Voluntary Tracker

  %tr
    %th(scope="row") Case Description
    %td Supervisor looks at the raw amounts of time spent over a given time-interval for a given trackee

  %tr
    %th(scope="row") Primary Actor
    %td Supervisor

  %tr
    %th(scope="row") Preconditions
    %td

  %tr
    %th(scope="row") Trigger
    %td

  %tr
    %th(scope="row") Basic Flow
    %td
      %ol
        %li Supervisor logs into system
        %li Supervisor tells system that he wants to view time logs
        %li Supervisor selects trackee (which may be himself)
        %li
          %p
            Supervisor selects
            %ul
              %li category (from the ones the Trackee has made accessible to him),
              %li time period (day, week, month, year, all time),
              %li granularity (hour, day, week, month, year)
              %li starting time (some time before now).

          %p.wrongphase Note: A good interface for starting time might be to populate a dropdown box with time-period units before this one (rounding to the nearest time-period) down to the earliest for which there is data.
        
        %li
          %p System prepares a chart - bar chart, where each bar sums all time intervals in the half-open interval [start_time+n*granularity, start_time+(n+1)*granularity) where n is a non-negative integer and n*granularity <= time_period.
          %p Intervals where no data has been recorded will show up as having 0 time spent.
        %li Supervisor can then select next and previous on the chart to change the starting time by time_period
        %li Supervisor can also change time period and granularity

      %p Note: an interesting feature (that doesn't belong in the basic use cases) is to allow looking at the total for a subset of the repetition interval. For example, look at total hours worked on Mondays for the whole year next to the total for Tuesdays. Or the total for each hour on Mondays over the whole year or for each hour of the day in general over the whole year. (And instead of year, one could look at all data.)
  %tr
    %th(scope="row") Alternate Flows
    %td
      %h4 Supervisor does not have access to any Trackees

      An error message is printed. 
      
%h3 Blank Use Case Template

%table.usecase
  %tr
    %th(scope="row") Case #
    %td

  %tr
    %th(scope="row") System
    %td Voluntary Tracker

  %tr
    %th(scope="row") Case Description
    %td

  %tr
    %th(scope="row") Primary Actor
    %td

  %tr
    %th(scope="row") Preconditions
    %td

  %tr
    %th(scope="row") Trigger
    %td

  %tr
    %th(scope="row") Basic Flow
    %td

  %tr
    %th(scope="row") Alternate Flows
    %td

      
:css
  .usecase {
      font-family:"Lucida Sans Unicode", "Lucida Grande", Sans-Serif;font-size:12px;
      background:#fff;
      border-collapse:collapse;
      text-align:left;
      margin:1em;
  }
  .usecase th{
      vertical-align: top;
      font-size:100%;
      font-weight:normal;
      background-color:#CDF;
      border-bottom:1px 
      solid #ccc;
      padding:0.5em 0.4em;
  }
  .usecase td{
      border-bottom:1px solid #ccc;
      font-size: 100%;
      padding:0.3em 0.4em;
  }
  .usecase tbody tr:hover td{
      background-color:#E6EEFF;
  }

  /*wrongphase is used to mark up elements that are from the wrong phase of the engineering process - implementaton or design mentioned in requirements, for example*/
  .wrongphase {
      color: #ccc;
  }
</body></html>
